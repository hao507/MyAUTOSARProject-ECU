
/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/* Generator version: 1.0.1
 * AUTOSAR version:   4.0.3
 */

VERSION 
{ 
	KOIL = "2.2"; 
	OSSEMANTICS = "ORTI", "2.2"; 
 };
 
 IMPLEMENTATION ArcCore_ORTI {
 	OS {
 		ENUM [
 			"NO_TASK" = 0x0, 
 			"OsIdle" = "&(Os_TaskVarList[0])",
            "OsBswServiceTask" = "&(Os_TaskVarList[1])",              
            "OsRteTask" = "&(Os_TaskVarList[2])",              
            "OsStartupTask" = "&(Os_TaskVarList[3])"              

			] RUNNINGTASK, "Running Task Identification";
			
      	ENUM  [
      		"NO_ISR2" = 0x0,
      		"ISR_0" = "&(Os_IsrVarList[0])"
      	] RUNNINGISR2, "ISR Identification";
 
 		ENUM "unsigned char" [
 		] RUNNINGTASKPRIORITY, "Priority of running task";
 
 	}; /* OS */
 	
 	TASK {
		ENUM "unsigned short" [
		] PRIORITY, "Actual Prio";

		ENUM "void*" [
     	] STACK, "Task Stack";
     	
     	CTYPE "unsigned char" EvWait, "Event Wait";
    	CTYPE "unsigned char" EvSet, "Event Set";
    	
    	STRING TaskType, "Task Type";
    	CTYPE "unsigned char" MaxActivations, "Max. Activations";
    	CTYPE "unsigned char" Activations, "Activations";
     	
     	ENUM "unsigned char" [
        	"ST_READY"=1,
        	"ST_WAIT_EVENT"=2,
        	"ST_SUSPENDED"=4,
        	"ST_RUNNING"=8,
        	"ST_NOT_STARTED"=16,
          	"ST_SLEEPING"=32,
          	"ST_WAIT_SEM"=64          	
      	] STATE, "State";
	};  /* TASK */
 	
 	
 	STACK {
		CTYPE "unsigned short" SIZE, "Stack Size (Byte)";
		CTYPE "unsigned short*" BASEADDRESS, "Stack Start Address";
		STRING STACKDIRECTION, "Stack Direction";
	}, "Stacks";   /* STACK */ 	
 
 	EVENT {
		STRING EvMask, "Event Mask";
	}, "Events";   /* Events */
 
 
    ALARM {
      ENUM "unsigned char" [
         "STOPPED" = 0,
         "RUNNING" = 1
      ] STATE, "Alarm State";
      
      CTYPE "unsigned long" CYCLETIME, "Cycle Time (Ticks)";
      CTYPE "unsigned long" ALARMTIME, "Alarm Time (Ticks)";
      STRING ACTION, "Action";
      STRING COUNTER, "Counter";
   }, "Alarms";   /* Alarms */
   
	COUNTER {
      	CTYPE "unsigned long" VALUE, "Current value";	
   	}, "Counters";  /* Counters */
 
 	RESOURCE {
      ENUM "unsigned char" [
         "LOCKED"=1,
         "UNLOCKED"=0
      ] STATE, "Resource state";
      
      ENUM "unsigned short" [
         "-" = 0xFFFF
      ] OWNER, "Resource owner";
      
      ENUM "unsigned short" [
         "-" = 0xFFFF
      ] PRIORITY, "Ceil. priority";

   }, "Resources";   /* Resources */
 
 }; /* IMPLEMENTATION */
 
OS ArcCore {
	RUNNINGTASK = "Os_Sys[0].currTaskPtr";
	RUNNINGISR2 = "Os_Sys[0].currIsrPtr";
};
 
TASK OsIdle {
	PRIORITY = "Os_TaskVarList[0].activePriority";
	STATE = "Os_TaskVarList[0].state";
	STACK = "stack_OsIdle";
}; 

STACK OsIdle {
	SIZE = "512";
	BASEADDRESS = "stack_OsIdle";
	STACKDIRECTION = "DOWN";
};
 
TASK OsBswServiceTask {
	PRIORITY = "Os_TaskVarList[1].activePriority";
	STATE = "Os_TaskVarList[1].state";
	TaskType = "BASIC";
	Activations = "Os_TaskVarList[1].activations";
	MaxActivations = "Os_TaskVarList[1].constPtr->activationLimit";
    STACK = "stack_OsBswServiceTask";
};

STACK OsBswServiceTask {
	SIZE = "2048";
	BASEADDRESS = "stack_OsBswServiceTask";
	STACKDIRECTION = "DOWN";
};
TASK OsRteTask {
	PRIORITY = "Os_TaskVarList[2].activePriority";
	STATE = "Os_TaskVarList[2].state";

	TaskType = "EXTENDED";
	EvWait = "Os_TaskVarList[2].ev_wait";
	EvSet = "Os_TaskVarList[2].ev_set";
    STACK = "stack_OsRteTask";
};

STACK OsRteTask {
	SIZE = "2048";
	BASEADDRESS = "stack_OsRteTask";
	STACKDIRECTION = "DOWN";
};
TASK OsStartupTask {
	PRIORITY = "Os_TaskVarList[3].activePriority";
	STATE = "Os_TaskVarList[3].state";
	TaskType = "BASIC";
	Activations = "Os_TaskVarList[3].activations";
	MaxActivations = "Os_TaskVarList[3].constPtr->activationLimit";
    STACK = "stack_OsStartupTask";
};

STACK OsStartupTask {
	SIZE = "2048";
	BASEADDRESS = "stack_OsStartupTask";
	STACKDIRECTION = "DOWN";
};

 
// Skip Events

COUNTER OsRteCounter {
	VALUE = "counter_list[0].val";
}; 

 
ALARM OsRteAlarm10ms {
    STATE = "(alarm_list[0].active) ? 1 : 0";
	ALARMTIME = "alarm_list[0].alarmtime";
    CYCLETIME = "alarm_list[0].cycletime";
	ACTION = "SetEvent OsRteTask";
    COUNTER = "OsRteCounter";
};
ALARM OsBswServiceAlarm {
    STATE = "(alarm_list[1].active) ? 1 : 0";
	ALARMTIME = "alarm_list[1].alarmtime";
    CYCLETIME = "alarm_list[1].cycletime";
	ACTION = "ActivateTask OsBswServiceTask ";			
    COUNTER = "OsRteCounter";
};
 




